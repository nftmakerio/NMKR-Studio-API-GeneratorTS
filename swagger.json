{
  "openapi": "3.0.1",
  "info": {
    "title": "NMKR Studio Api (Mainnet)",
    "description": "Documentation of the NMKR Studio Api Functions. All API Functions must called from https://studio-api.nmkr.io",
    "contact": {
      "name": "Support NMKR Studio",
      "url": "https://nmkr.io"
    },
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://studio-api.nmkr.io"
    }
  ],
  "paths": {
    "/v2/AddPayoutWallet/{walletaddress}": {
      "get": {
        "tags": ["Customer"],
        "summary": "Adds a payout wallet to your account",
        "description": "With this call you can add a payout wallet in your account. You have to confirm the wallet by clicking the link in the email",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Some data are not correct - eg wrong wallet address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The project was not found in our database or not assiged to your account",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CancelAddressReservation/{projectuid}/{paymentaddress}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Cancels a address reservation (project uid)",
        "description": "When you call this API, the reservation of all nfts dedicated to this address will released to free state. This function can be called, when a user closes his browser or when he hit on a \"Cancel Reservation\" Button",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation was successful"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Address is not in active state - eg. already paid or already released to free",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckAddress/{projectuid}/{address}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Checks an address for state changes (project uid)",
        "description": "You can call this api to check if a user has paid to this particular address or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted \r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address incl. the assigned NFTs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The address was not found in our database or not assiged to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckAddressWithCustomproperty/{projectuid}/{customproperty}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Checks an custom property for state changes (project uid)",
        "description": "You can call this api to check if a user has paid to a particular address with a custom property or if the address has expired. The reserved/sold NFTs will only filled after the amount was fully paid. This is for security reasons. In the reserved state, only the nft ids and tokenamount are submitted \r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address incl. the assigned NFTs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The custom property was not found in our database or not assiged to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckIfEglibleForDiscount/{projectuid}/{address}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Checks if there applies a discount for an address",
        "description": "Checks if there applies a discount for an address",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CheckDiscountsResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckDiscountsResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckDiscountsResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckDiscountsResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckIfSaleCondtionsMet/{projectuid}/{address}/{countnft}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Checks, if an address matches the sale condtions",
        "description": "Checks, if an address matches the sale condtions of a project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CheckConditionsResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckConditionsResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckConditionsResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckConditionsResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckMetadata/{nftuid}": {
      "post": {
        "tags": ["NFT"],
        "summary": "Checks if the metadata are valid",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMetadataClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMetadataClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMetadataClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns OK if the metadata are valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The NFT was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CheckUtxo/{address}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns the utxo of an address",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the AssetsAssociatedWithAccount Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TxInAddressesClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxInAddressesClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxInAddressesClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)"
          }
        }
      }
    },
    "/v2/CheckWalletValidation/{validationuid}": {
      "get": {
        "tags": ["Wallet validation"],
        "summary": "Returns the result of a wallet validation",
        "description": "Here you can check the result of a wallet validation. The result are \"notvalidated\", \"validated\",\"expired\"",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validationuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the CheckWalletValidationResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWalletValidationResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CreateBurningAddress/{projectuid}/{addressactiveinhours}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Creates a burning endpoint for a specific address",
        "description": "When you call this endpoint, a Burning Address is created for this project. All NFTs associated with this project (same policyid) that are sent to this endpoint will be deleted (burned). All other NFTs will be sent back. \r\nThe policy of the project must still be active.If it is already locked, it can no longer be deleted.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressactiveinhours",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The burning address was created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBurningEndpointClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBurningEndpointClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBurningEndpointClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectuid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Some parameters where not correct or the project already has 10 or more burning addresses",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CreatePaymentTransaction": {
      "post": {
        "tags": ["Paymenttransactions"],
        "summary": "Creates a payment transaction",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentTransactionClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentTransactionClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentTransactionClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the PaymentTransactionResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/CreateProject": {
      "post": {
        "tags": ["Projects"],
        "summary": "Creates a new Project",
        "description": "WIth this Controller you can create a new project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectClassV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectClassV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectClassV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the UploadNftResult Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNewProjectResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash"
          },
          "409": {
            "description": "There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash"
          }
        }
      }
    },
    "/v2/DeleteNft/{nftuid}": {
      "get": {
        "tags": ["NFT"],
        "summary": "Deletes a nft from the database (nft uid)",
        "description": "You can delete a nft, if it is not in sold or reserved state",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/DeleteProject/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Deletes a project",
        "description": "With this call you can delete a project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Apiresultclass with the information about the address incl. the assigned NFTs",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The project was not found in our database or not assiged to your account",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetAdaRates": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns the actual price in EUR and USD for ADA",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the AdaRatesClass",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdaRatesClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdaRatesClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdaRatesClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetAllAssetsInWallet/{address}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns all assets that are in a wallet",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the AssetsAssociatedWithAccount Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsAssociatedWithAccount"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsAssociatedWithAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsAssociatedWithAccount"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetAuctionState/{auctionuid}": {
      "get": {
        "tags": ["Auctions"],
        "summary": "Returns the state - and the last bids of a auction project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auctionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the GetAuctionStateResultClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAuctionStateResultClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAuctionStateResultClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAuctionStateResultClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetCardanoTokenRegistryInformation/{policyid}/{tokenname}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns the Token Registry Information for a specific token (if available)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenname",
            "in": "path",
            "description": "The Name of the Token (not HEX)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns TokenRegistryMetadata",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRegistryMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRegistryMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRegistryMetadata"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No Registry Information was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetCounts/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns the count of the sold, reserved and free nfts (project uid)",
        "description": "You will get the count of all sold, reserved and free nfts of a particular project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftCountsClass",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftCountsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetDiscounts/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns the discounts for this project (project uid)",
        "description": "If you call this function, you will get all active discounts for this project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the GetDiscountsClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDiscountsClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDiscountsClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDiscountsClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetIdentityAccounts/{policyid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns information about the identities (if the identity token was created) of a project",
        "description": "You will receive all identities which are connected to this project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Identities (if available)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityInformationClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityInformationClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityInformationClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetNftDetailsById/{nftuid}": {
      "get": {
        "tags": ["NFT"],
        "summary": "Returns detail information about one nft specified by Id (nft uid)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about one nfts with the submitted id",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetNftDetailsByTokenname/{projectuid}/{nftname}": {
      "get": {
        "tags": ["NFT"],
        "summary": "Returns detail information about one nft specified by its name",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about one nft with the submitted name",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetNfts/{projectuid}/{state}/{count}/{page}": {
      "get": {
        "tags": ["NFT"],
        "summary": "Returns detail information about nfts with a specific state with Pagination support. (project uid)",
        "description": "You will receive all information (fingerprint, ipfshash, etc.) about the nfts within a specific state.\r\nState \"all\" lists all available nft in this project. The other states are: \"free\", \"reserved\", \"sold\" and \"error\"",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "(Optional) The sort order of the result. Possible values are: id (default),id_desc (descending order), selldate (on sold nfts) and selldate_desc (descending order)",
            "schema": {
              "type": "string",
              "default": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a List of the NFT Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NFT"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The projectuid was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPaymentAddressForRandomNftSale/{projectuid}/{countnft}/{lovelace}/{customeripaddress}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Returns an address for a random nft sale (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customeripaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPaymentAddressForRandomNftSale/{projectuid}/{countnft}/{customeripaddress}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Returns an address for a random nft sale (price from pricelist) (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n\r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customeripaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPaymentAddressForSpecificNftSale/{nftuid}/{tokencount}/{lovelace}/{customeripaddress}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Returns an address for a specific nft sale (no random distribution) (project and nft id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lovelace",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customeripaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPaymentAddressForSpecificNftSale/{nftuid}/{tokencount}/{customeripaddress}": {
      "get": {
        "tags": ["Address reservation (sale)"],
        "summary": "Returns an address for a specific nft sale (no random distribution) - price from pricelist or specific nft price (project and nft id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.\r\n            \r\nIMPORTANT:\r\nPlease notice, that the call is limited to 300 addressreservations per minute. You will get the error 429 if you call this routine more than 300 times a minute.\r\nPlease do not implement this function on your start page. And please prevent the call of this function from bots with a captcha.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customeripaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPaymentAddressForSpecificNftSale/{customeripaddress}": {
      "post": {
        "tags": ["Address reservation (sale)"],
        "summary": "Returns an address for a multiple specific nfts sale (no random distribution) (project id)",
        "description": "When you call this API, you will receive an address where the buyer has to pay the amount of ada you define. The address will be monitored until it exipred. The count of nft will be reserved until it expires or the buyer has send the ada to this address.\r\nIf the buyer has send the amount of ada, the nfts will be minted and send to his senderaddress and the nfts state changes to sold.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customeripaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referer",
            "in": "query",
            "description": "(Optional) A referer code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customproperty",
            "in": "query",
            "description": "(Optional) A custom property which can be set. Will be returned at webhooks or checkaddress",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveMultipleNftsClassV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveMultipleNftsClassV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveMultipleNftsClassV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the GetPaymentAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The id of the nft is not found or not assigned to this project",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There is a conflict with the selected nft. See errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The demanded ada amount is too less. The minimium is 5 ADA - eg 5000000 lovelace",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPayoutWallets": {
      "get": {
        "tags": ["Customer"],
        "summary": "Returns all payout wallets in your account",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetPayoutWalletsResultClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPayoutWalletsResultClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPayoutWalletsResultClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPayoutWalletsResultClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPolicySnapshot/{policyid}/{cumulateStakeAddresses}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns a snapshot with all addresses and tokens for a specific policyid",
        "description": "You will receive all tokens and the holding addresses of a specific policyid",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cumulateStakeAddresses",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of NmkrAssetAddress",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NmkrAssetAddress"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NmkrAssetAddress"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NmkrAssetAddress"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The policyid was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetPricelist/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns the actual valid pricelist for this project (project uid)",
        "description": "You will get the predefined prices for one or more nf",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the PricelistClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetProjectDetails/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns detail information about a project",
        "description": "You will receive all information about this project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftProjectsDetails"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The nft was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetRoyaltyInformation/{policyid}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Returns the royalty information for a specific policyid",
        "description": "You will receive the rate in percent and the wallet address for the royalties (if applicable) of a specific policyid",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of RoyaltyClass",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoyaltyClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoyaltyClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoyaltyClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong policyid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "There are no royalty informations for this policyid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The policyid is not valid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetSaleConditions/{projectuid}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Returns the saleconditions for this project (project uid)",
        "description": "If you call this funtion, you will get all active saleconditions for this project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of the GetSaleconditionsClass",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSaleconditionsClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSaleconditionsClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSaleconditionsClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetWalletValidationAddress/{validationname}": {
      "get": {
        "tags": ["Wallet validation"],
        "summary": "Returns an address for wallet validation",
        "description": "When you call this API, you will receive an address for a wallet validation. The user can send any ada to this address and the ada (and tokens) will sent back to the sender. With the function CheckWalletValidation you can check the state of the address",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validationname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetWalletValidationAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/GetWalletValidationAddress": {
      "get": {
        "tags": ["Wallet validation"],
        "summary": "Returns an address for wallet validation",
        "description": "When you call this API, you will receive an address for a wallet validation. The user can send any ada to this address and the ada (and tokens) will sent back to the sender. With the function CheckWalletValidation you can check the state of the address",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validationname",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the GetWalletValidationAddressResultClass Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletValidationAddressResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "429": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ListProjects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Lists all your projects",
        "description": "You will receive a list with all of your projects\r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The provided informations are not valid for this request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The apikey or the projects where not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ListProjects/{count}/{page}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Lists all your projects with pagination",
        "description": "You will receive a list with all of your projects\r\n            \r\nIMPORTANT:\r\nThis function uses an internal cache. All results will be cached for 10 seconds. You do not need to call this function more than once in 10 seconds, because the results will be the same.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the NftProjectsDetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NftProjectsDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The provided informations are not valid for this request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The apikey or the projects where not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ManageWhitelist/{projectuid}": {
      "get": {
        "tags": ["Whitelists"],
        "summary": "Gets all entries of a projects whitelist",
        "description": "With this call you can retrieve all entries of a whitelist of a project (if the project has one)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the complete whitelist and how much are already sold",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWhitelistEntriesClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWhitelistEntriesClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWhitelistEntriesClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Some data are not correct - eg wrong wallet address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The project was not found in our database or not assiged to your account",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ManageWhitelist/{projectuid}/{address}/{countofnfts}": {
      "post": {
        "tags": ["Whitelists"],
        "summary": "Adds an entry to a projects whitelist",
        "description": "With this call you can add an entry to a whitelist of a project (if the project has one)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countofnfts",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns when the address was added to the whitelist"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Some data are not correct - eg wrong wallet address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The project was not found in our database or not assiged to your account",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ManageWhitelist/{projectuid}/{address}": {
      "delete": {
        "tags": ["Whitelists"],
        "summary": "Deletes an entry from a projects whitelist",
        "description": "With this call you can delete an entry from a whitelist of a project (if the project has one)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns, when the address was successfully deleted from the list"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Some data are not correct - eg wrong wallet address",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "The project was not found in our database or not assiged to your account",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/MintAndSendRandom/{projectuid}/{countnft}/{receiveraddress}": {
      "get": {
        "tags": ["Mint"],
        "summary": "Mints random Nfts and sends it to an Address",
        "description": "When you call this API, random NFTs will be selected, minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countnft",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "receiveraddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectuid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No more nft available",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The receiveraddress is not a valid cardano address or a valid ada handle",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/MintAndSendSpecific/{projectuid}/{nftuid}/{tokencount}/{receiveraddress}": {
      "get": {
        "tags": ["Mint"],
        "summary": "Mints a specific Nft and sends it to an Address",
        "description": "When you call this API, a specific NFT will be minted and send to an ada address. You will need ADA in your Account for the transaction and minting costs.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokencount",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "receiveraddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Nft Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintAndSendResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectuid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "NFT no more available (already sold)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The receiveraddress is not a valid cardano address or a valid ada handle",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/MintRoyaltyToken/{projectuid}/{royaltyaddress}/{percentage}": {
      "get": {
        "tags": ["Mint"],
        "summary": "Mints the royalty token",
        "description": "When you call this API, the royalty token for this project will be minted and send to a burning address. You have to specify the address for the royalties and the percentage of royalties. You need mint credits in your account. Only one royalty token can be minted for each project",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "royaltyaddress",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "percentage",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The royaltytoken was created successfully"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectuid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The project already has a royalty token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/GetTransactionState": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/GetPaymentAddress": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentAddressResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/SignDecentralPayment": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignDecentralClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SignDecentralClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SignDecentralClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/CheckPaymentAddress": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAddressResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/CancelTransaction": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/GetPriceListForProject": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricelistClass"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/LockNft": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SellerClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SellerClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SellerClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/SubmitTransaction": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTransactionClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTransactionClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTransactionClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectedErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/BetOnAuction": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/BuyDirectsale": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/EndTransaction": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/ReservePaymentgatewayMintAndSendNft": {
      "get": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/MintAndSendPaymentgatewayNft": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintAndSendReceiverClass"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MintAndSendReceiverClass"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MintAndSendReceiverClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ProceedPaymentTransaction/{paymenttransactionuid}/UpdateCustomProperties": {
      "post": {
        "tags": ["Paymenttransactions"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenttransactionuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionResultClass"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/RemintAndBurn/{projectuid}/{nftuid}": {
      "get": {
        "tags": ["Mint"],
        "summary": "ReMints a specific Nft and sends it to a burn address",
        "description": "When you call this API, you can update metadata of an already sold nft. The nft will be minted and send to a burning address",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remint is scheduled"
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectuid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "NFT no more available (already sold)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "409": {
            "description": "There are pending transactions on the sender address (your account address). Please wait a second",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "402": {
            "description": "Too less ADA in your account. Fill up ADA first before try to mint and send",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "The receiveraddress is not a valid cardano address or a valid ada handle",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/UpdateMetadata/{projectuid}/{nftuid}": {
      "post": {
        "tags": ["NFT"],
        "summary": "Updates the Metadata for one specific NFT",
        "description": "With this API you can update the Metadata Override for one specific NFT\r\nIf you leave the field blank, the Metadata override will be deleted and the Metadata from the project will be used.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nftuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Nftdetails Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsClass"
                }
              }
            }
          },
          "404": {
            "description": "The NFT was not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          }
        }
      }
    },
    "/v2/UploadNft/{projectuid}": {
      "post": {
        "tags": ["NFT"],
        "summary": "Upload a File to a project and pin it to IPFS",
        "description": "With this API you can upload a file to IPFS and add it to a project. You can upload the file as BASE64 Content or as URL Link or as IPFS Hash.\r\nIf you submit Metadata, this Metadata will be used instead of the Metadatatemplate from the project. You can either submit Metadata or MetadataPlaceholder, but not both (because it makes no sense).\r\nThe Metadata field is optional and if you dont use it, it will use the Template from your project. It is poosible to mix both versions in one project. You can have one nft with own metadata and other nfts\r\nwith the template.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadNftClassV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadNftClassV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadNftClassV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the UploadNftResult Class",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadNftResultClass"
                }
              }
            }
          },
          "401": {
            "description": "The access was denied. (Wrong or expired APIKEY, wrong projectid etc.)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "406": {
            "description": "See the errormessage in the resultset for further information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - see the errormessage in the resultset",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResultClass"
                }
              }
            }
          },
          "404": {
            "description": "No Image Content was provided. Send a file either as Base64 or as Link or IPFS Hash"
          },
          "409": {
            "description": "There is a conflict with the provided images. Send a file either as Base64 or as Link or IPFS Hash"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdaRatesClass": {
        "type": "object",
        "properties": {
          "usdRate": {
            "type": "number",
            "format": "float"
          },
          "eurRate": {
            "type": "number",
            "format": "float"
          },
          "jpyRate": {
            "type": "number",
            "format": "float"
          },
          "btcRate": {
            "type": "number",
            "format": "float"
          },
          "effectivedate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AddressTxInClass": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "utxo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxInClass"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiErrorResultClass": {
        "type": "object",
        "properties": {
          "resultState": {
            "$ref": "#/components/schemas/ResultStates"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "innerErrorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetsAssociatedWithAccount": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuctionHistoryResultClass": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "nullable": true
          },
          "bidAmount": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/AuctionHistoryStates"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "returnTxHash": {
            "type": "string",
            "nullable": true
          },
          "signedAndSubmitted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuctionHistoryStates": {
        "enum": ["seller", "buyer", "outbid", "invalid", "expired"],
        "type": "string"
      },
      "AuctionParametersClass": {
        "type": "object",
        "properties": {
          "durationInSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minBet": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AuctionsHistory": {
        "type": "object",
        "properties": {
          "txhash": {
            "type": "string",
            "nullable": true
          },
          "senderaddress": {
            "type": "string",
            "nullable": true
          },
          "bidamount": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "returntxhash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuctionsNft": {
        "type": "object",
        "properties": {
          "policyid": {
            "type": "string",
            "nullable": true
          },
          "tokennamehex": {
            "type": "string",
            "nullable": true
          },
          "ipfshash": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "tokencount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AuctionsResultClass": {
        "type": "object",
        "properties": {
          "jsonHash": {
            "type": "string",
            "nullable": true
          },
          "minBet": {
            "type": "integer",
            "format": "int64"
          },
          "runsUntil": {
            "type": "string",
            "format": "date-time"
          },
          "actualBid": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuctionHistoryResultClass"
            },
            "nullable": true
          },
          "marketplaceFeePercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "royaltyFeePercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BuyerClass": {
        "type": "object",
        "properties": {
          "buyer": {
            "$ref": "#/components/schemas/TransactionAddressClass"
          },
          "buyerOffer": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "CheckAddressResultClass": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "nullable": true
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          },
          "hasToPay": {
            "type": "integer",
            "format": "int64"
          },
          "payDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "transaction": {
            "type": "string",
            "nullable": true
          },
          "senderAddress": {
            "type": "string",
            "nullable": true
          },
          "reservedNft": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            },
            "nullable": true
          },
          "rejectReason": {
            "type": "string",
            "nullable": true
          },
          "rejectParameter": {
            "type": "string",
            "nullable": true
          },
          "stakeReward": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "discount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "customProperty": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckConditionsResultClass": {
        "type": "object",
        "properties": {
          "conditionsMet": {
            "type": "boolean"
          },
          "rejectReason": {
            "type": "string",
            "nullable": true
          },
          "rejectParameter": {
            "type": "string",
            "nullable": true
          },
          "sendBackAddress": {
            "$ref": "#/components/schemas/FrankenAddressProtectionClass"
          },
          "blocked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CheckDiscountsResultClass": {
        "type": "object",
        "properties": {
          "discountInPercent": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "CheckWalletValidationResultClass": {
        "type": "object",
        "properties": {
          "validationResult": {
            "type": "string",
            "nullable": true
          },
          "senderAddress": {
            "type": "string",
            "nullable": true
          },
          "stakeAddress": {
            "type": "string",
            "nullable": true
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          },
          "validationaddress": {
            "type": "string",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "validationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateBurningEndpointClass": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "validuntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateNewProjectResultClass": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "policyScript": {
            "type": "string",
            "nullable": true
          },
          "policyExpiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePaymentTransactionClass": {
        "type": "object",
        "properties": {
          "projectUid": {
            "type": "string",
            "nullable": true
          },
          "paymentTransactionType": {
            "$ref": "#/components/schemas/PaymentTransactionTypes"
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "transactionParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionParametersClass"
            },
            "nullable": true
          },
          "paymentgatewayParameters": {
            "$ref": "#/components/schemas/PaymentgatewayParametersClass"
          },
          "decentralParameters": {
            "$ref": "#/components/schemas/DecentralParametersClass"
          },
          "auctionParameters": {
            "$ref": "#/components/schemas/AuctionParametersClass"
          },
          "directSaleParameters": {
            "$ref": "#/components/schemas/DirectSaleParameterClass"
          },
          "customerIpAddress": {
            "type": "string",
            "nullable": true
          },
          "paymentTransactionNotifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTransactionNotificationsClass"
            },
            "nullable": true
          },
          "referer": {
            "type": "string",
            "nullable": true
          },
          "referencedPaymenttransactionUid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProjectClassV2": {
        "type": "object",
        "properties": {
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projecturl": {
            "type": "string",
            "nullable": true
          },
          "tokennamePrefix": {
            "type": "string",
            "nullable": true
          },
          "policyExpires": {
            "type": "boolean"
          },
          "policyLocksDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payoutWalletaddress": {
            "type": "string",
            "nullable": true
          },
          "payoutWalletaddressUsdc": {
            "type": "string",
            "nullable": true
          },
          "maxNftSupply": {
            "type": "integer",
            "format": "int64"
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyClass"
          },
          "metadataTemplate": {
            "type": "string",
            "nullable": true
          },
          "addressExpiretime": {
            "type": "integer",
            "format": "int32"
          },
          "pricelist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricelistClassV2"
            },
            "nullable": true
          },
          "additionalPayoutWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutWalletsClassV2"
            },
            "nullable": true
          },
          "saleConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleconditionsClassV2"
            },
            "nullable": true
          },
          "enableFiat": {
            "type": "boolean",
            "nullable": true
          },
          "enableDecentralPayments": {
            "type": "boolean",
            "nullable": true
          },
          "enableCrossSaleOnPaymentgateway": {
            "type": "boolean",
            "nullable": true
          },
          "activatePayinAddress": {
            "type": "boolean",
            "nullable": true
          },
          "paymentgatewaysalestart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRoyaltyTokenIfNotExistsClass": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DecentralParametersClass": {
        "type": "object",
        "properties": {
          "mintNfts": {
            "$ref": "#/components/schemas/MintNftsClass"
          },
          "createRoyaltyTokenIfNotExists": {
            "$ref": "#/components/schemas/CreateRoyaltyTokenIfNotExistsClass"
          }
        },
        "additionalProperties": false
      },
      "DecentralParametersResultClass": {
        "type": "object",
        "properties": {
          "mintNfts": {
            "$ref": "#/components/schemas/MintNftsResultClass"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "stakeRewards": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "discount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "rejectParameter": {
            "type": "string",
            "nullable": true
          },
          "rejectReason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DirectSaleParameterClass": {
        "type": "object",
        "properties": {
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "DirectSaleResultsClass": {
        "type": "object",
        "properties": {
          "sellingPrice": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceAmount": {
            "type": "integer",
            "format": "int64"
          },
          "sellerAmount": {
            "type": "integer",
            "format": "int64"
          },
          "royaltyAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "additionalPayoutAmount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "lockedInAmount": {
            "type": "integer",
            "format": "int64"
          },
          "sellerAddress": {
            "type": "string",
            "nullable": true
          },
          "buyerAddress": {
            "type": "string",
            "nullable": true
          },
          "sellerTxHash": {
            "type": "string",
            "nullable": true
          },
          "sellerTxCreate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FrankenAddressProtectionClass": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "originatorAddress": {
            "type": "string",
            "nullable": true
          },
          "stakeAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAuctionStateResultClass": {
        "type": "object",
        "properties": {
          "auctionname": {
            "type": "string",
            "nullable": true
          },
          "auctionType": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "minbet": {
            "type": "integer",
            "format": "int64"
          },
          "actualbet": {
            "type": "integer",
            "format": "int64"
          },
          "runsuntil": {
            "type": "string",
            "format": "date-time"
          },
          "selleraddress": {
            "type": "string",
            "nullable": true
          },
          "highestbidder": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "royaltyfeespercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "royaltyaddress": {
            "type": "string",
            "nullable": true
          },
          "marketplacefeepercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "auctionsNfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuctionsNft"
            },
            "nullable": true
          },
          "auctionshistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuctionsHistory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDiscountsClass": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/PricelistDiscountTypes"
          },
          "policyId1": {
            "type": "string",
            "nullable": true
          },
          "policyId2": {
            "type": "string",
            "nullable": true
          },
          "policyId3": {
            "type": "string",
            "nullable": true
          },
          "policyId4": {
            "type": "string",
            "nullable": true
          },
          "policyId5": {
            "type": "string",
            "nullable": true
          },
          "minOrMaxValue": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "discountInPercent": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "GetPaymentAddressResultClass": {
        "type": "object",
        "properties": {
          "paymentAddress": {
            "type": "string",
            "nullable": true
          },
          "paymentAddressId": {
            "type": "integer",
            "format": "int32"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "adaToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "debug": {
            "type": "string",
            "nullable": true
          },
          "priceInEur": {
            "type": "number",
            "format": "float"
          },
          "priceInUsd": {
            "type": "number",
            "format": "float"
          },
          "priceInJpy": {
            "type": "number",
            "format": "float"
          },
          "priceInBtc": {
            "type": "number",
            "format": "float"
          },
          "effectivedate": {
            "type": "string",
            "format": "date-time"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "sendbackToUser": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetPayoutWalletsResultClass": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/PayoutWalletState"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetSaleconditionsClass": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/SaleConditionsTypes"
          },
          "policyId1": {
            "type": "string",
            "nullable": true
          },
          "policyId2": {
            "type": "string",
            "nullable": true
          },
          "policyId3": {
            "type": "string",
            "nullable": true
          },
          "policyId4": {
            "type": "string",
            "nullable": true
          },
          "policyId5": {
            "type": "string",
            "nullable": true
          },
          "minOrMaxValue": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "policyProjectname": {
            "type": "string",
            "nullable": true
          },
          "whitelistedAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistetedCountClass"
            },
            "nullable": true
          },
          "blacklistedAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "onlyOneSalePerWhitelistAddress": {
            "type": "boolean",
            "nullable": true
          },
          "alreadyUsedAddressOrStakeaddress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistetedCountClass"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetWalletValidationAddressResultClass": {
        "type": "object",
        "properties": {
          "validationUId": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetWhitelistEntriesClass": {
        "type": "object",
        "properties": {
          "addresss": {
            "type": "string",
            "nullable": true
          },
          "stakeaddress": {
            "type": "string",
            "nullable": true
          },
          "countNftsOrTokens": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "totalSoldNftsOrTokens": {
            "type": "integer",
            "format": "int64"
          },
          "soldNftsOrTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SoldNftsOrTokensFromWhitelist"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentityInformationClass": {
        "type": "object",
        "properties": {
          "date": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "accounts": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "signatures": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetadataPlaceholderClass": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintAndSendReceiverClass": {
        "type": "object",
        "properties": {
          "receiverAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintAndSendResultClass": {
        "type": "object",
        "properties": {
          "mintAndSendId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sendedNft": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintAndSendSubstates": {
        "enum": ["execute", "success", "error", "canceled", "invalid"],
        "type": "string"
      },
      "MintNftsClass": {
        "type": "object",
        "properties": {
          "countNfts": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "reserveNfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReserveNftsClassV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MintNftsResultClass": {
        "type": "object",
        "properties": {
          "countNfts": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "reserveNfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedNftsClassV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NFT": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "detaildata": {
            "type": "string",
            "nullable": true
          },
          "ipfsLink": {
            "type": "string",
            "nullable": true
          },
          "gatewayLink": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "minted": {
            "type": "boolean"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          },
          "assetname": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "initialMintTxHash": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "tokenamount": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "selldate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "paymentGatewayLinkForSpecificSale": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftCountsClass": {
        "type": "object",
        "properties": {
          "nftTotal": {
            "type": "integer",
            "format": "int64"
          },
          "sold": {
            "type": "integer",
            "format": "int64"
          },
          "free": {
            "type": "integer",
            "format": "int64"
          },
          "reserved": {
            "type": "integer",
            "format": "int64"
          },
          "error": {
            "type": "integer",
            "format": "int64"
          },
          "blocked": {
            "type": "integer",
            "format": "int64"
          },
          "totalTokens": {
            "type": "integer",
            "format": "int64"
          },
          "totalBlocked": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftDetailsClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "ipfshash": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "detaildata": {
            "type": "string",
            "nullable": true
          },
          "minted": {
            "type": "boolean"
          },
          "receiveraddress": {
            "type": "string",
            "nullable": true
          },
          "selldate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "soldby": {
            "type": "string",
            "nullable": true
          },
          "reserveduntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "policyid": {
            "type": "string",
            "nullable": true
          },
          "assetid": {
            "type": "string",
            "nullable": true
          },
          "assetname": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "initialminttxhash": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "type": "string",
            "nullable": true
          },
          "ipfsGatewayAddress": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "singlePrice": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "paymentGatewayLinkForSpecificSale": {
            "type": "string",
            "nullable": true
          },
          "sendBackCentralPaymentInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "priceInLovelaceCentralPayments": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "NftFileV2": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string",
            "nullable": true
          },
          "fileFromBase64": {
            "type": "string",
            "nullable": true
          },
          "fileFromsUrl": {
            "type": "string",
            "nullable": true
          },
          "fileFromIPFS": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftProjectsDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "projectname": {
            "type": "string",
            "nullable": true
          },
          "projecturl": {
            "type": "string",
            "nullable": true
          },
          "projectLogo": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "free": {
            "type": "integer",
            "format": "int64"
          },
          "sold": {
            "type": "integer",
            "format": "int64"
          },
          "reserved": {
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "blocked": {
            "type": "integer",
            "format": "int64"
          },
          "uid": {
            "type": "string",
            "nullable": true
          },
          "maxTokenSupply": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "addressReservationTime": {
            "type": "integer",
            "format": "int32"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "enableCrossSaleOnPaymentGateway": {
            "type": "boolean"
          },
          "adaPayoutWalletAddress": {
            "type": "string",
            "nullable": true
          },
          "usdcPayoutWalletAddress": {
            "type": "string",
            "nullable": true
          },
          "enableFiatPayments": {
            "type": "boolean"
          },
          "paymentGatewaySaleStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enableDecentralPayments": {
            "type": "boolean"
          },
          "policyLocks": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "royaltyAddress": {
            "type": "string",
            "nullable": true
          },
          "royaltyPercent": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lockslot": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "disableManualMintingbutton": {
            "type": "boolean"
          },
          "disableRandomSales": {
            "type": "boolean"
          },
          "disableSpecificSales": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NftSubfileFileV2": {
        "type": "object",
        "properties": {
          "subfile": {
            "$ref": "#/components/schemas/NftFileV2"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "metadataPlaceholder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataPlaceholderClass"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NmkrAssetAddress": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "assetName": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "totalSupply": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "multiplier": {
            "type": "integer",
            "format": "int64"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "decimals": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "PaymentgatewayParametersClass": {
        "type": "object",
        "properties": {
          "mintNfts": {
            "$ref": "#/components/schemas/MintNftsClass"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentgatewayResultsClass": {
        "type": "object",
        "properties": {
          "priceInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "fee": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "minUtxo": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "mintNfts": {
            "$ref": "#/components/schemas/MintNftsResultClass"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionNotificationsClass": {
        "type": "object",
        "properties": {
          "notificationType": {
            "$ref": "#/components/schemas/PaymentTransactionNotificationTypes"
          },
          "notificationEndpoint": {
            "type": "string",
            "nullable": true
          },
          "hmacSecret": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionNotificationTypes": {
        "enum": ["webhook", "email"],
        "type": "string"
      },
      "PaymentTransactionResultClass": {
        "type": "object",
        "properties": {
          "paymentTransactionUid": {
            "type": "string",
            "nullable": true
          },
          "projectUid": {
            "type": "string",
            "nullable": true
          },
          "paymentTransactionType": {
            "$ref": "#/components/schemas/PaymentTransactionTypes"
          },
          "customProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/PaymentTransactionsStates"
          },
          "transactionParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionParametersClass"
            },
            "nullable": true
          },
          "paymentTransactionCreated": {
            "type": "string",
            "format": "date-time"
          },
          "paymentgatewayResults": {
            "$ref": "#/components/schemas/PaymentgatewayResultsClass"
          },
          "paymentTransactionSubStateResult": {
            "$ref": "#/components/schemas/PaymentTransactionSubStateResultClass"
          },
          "auctionResults": {
            "$ref": "#/components/schemas/AuctionsResultClass"
          },
          "directSaleResults": {
            "$ref": "#/components/schemas/DirectSaleResultsClass"
          },
          "decentralParameters": {
            "$ref": "#/components/schemas/DecentralParametersResultClass"
          },
          "mintAndSendResults": {
            "$ref": "#/components/schemas/PaymentTransactionsMintAndSendResultClass"
          },
          "cbor": {
            "type": "string",
            "nullable": true
          },
          "signedCbor": {
            "type": "string",
            "nullable": true
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "signGuid": {
            "type": "string",
            "nullable": true
          },
          "fee": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "txHash": {
            "type": "string",
            "nullable": true
          },
          "nmkrPayUrl": {
            "type": "string",
            "nullable": true
          },
          "referencedTransaction": {
            "$ref": "#/components/schemas/PaymentTransactionResultClass"
          },
          "customeripaddress": {
            "type": "string",
            "nullable": true
          },
          "referer": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionsMintAndSendResultClass": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/MintAndSendSubstates"
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "executed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "receiverAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionsStates": {
        "enum": [
          "active",
          "expired",
          "finished",
          "prepared",
          "error",
          "canceled",
          "rejected"
        ],
        "type": "string"
      },
      "PaymentTransactionSubStateResultClass": {
        "type": "object",
        "properties": {
          "paymentTransactionSubstate": {
            "$ref": "#/components/schemas/PaymentTransactionSubstates"
          },
          "lastTxHash": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionSubstates": {
        "enum": [
          "waitingforlocknft",
          "waitingforbid",
          "sold",
          "canceled",
          "readytosignbyseller",
          "readytosignbysellercancel",
          "readytosignbybuyer",
          "auctionexpired",
          "waitingforsale",
          "submitted",
          "confirmed"
        ],
        "type": "string"
      },
      "PaymentTransactionTypes": {
        "enum": [
          "paymentgateway_nft_specific",
          "paymentgateway_nft_random",
          "smartcontract_directsale",
          "smartcontract_auction",
          "legacy_auction",
          "legacy_directsale",
          "decentral_mintandsend_specific",
          "decentral_mintandsend_random",
          "decentral_mintandsale_specific",
          "decentral_mintandsale_random",
          "paymentgateway_mintandsend_specific",
          "paymentgateway_mintandsend_random",
          "nmkr_pay_random",
          "nmkr_pay_specific"
        ],
        "type": "string"
      },
      "PayoutWalletsClassV2": {
        "type": "object",
        "properties": {
          "payoutWallet": {
            "type": "string",
            "nullable": true
          },
          "valuePercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "valueFixInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayoutWalletState": {
        "enum": ["Active", "NotActive", "Blocked", "ConfirmationExpired"],
        "type": "string"
      },
      "PolicyClass": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "privateVerifykey": {
            "type": "string",
            "nullable": true
          },
          "privateSigningkey": {
            "type": "string",
            "nullable": true
          },
          "policyScript": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricelistClass": {
        "type": "object",
        "properties": {
          "countNft": {
            "type": "integer",
            "format": "int64"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "adaToSend": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priceInEur": {
            "type": "number",
            "format": "float"
          },
          "priceInUsd": {
            "type": "number",
            "format": "float"
          },
          "priceInJpy": {
            "type": "number",
            "format": "float"
          },
          "priceInBtc": {
            "type": "number",
            "format": "float"
          },
          "effectivedate": {
            "type": "string",
            "format": "date-time"
          },
          "additionalPriceInTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tokens"
            },
            "nullable": true
          },
          "paymentGatewayLinkForRandomNftSale": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "sendBackCentralPaymentInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "sendBackCentralPaymentInAda": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priceInLovelaceCentralPayments": {
            "type": "integer",
            "format": "int64"
          },
          "adaToSendCentralPayments": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PricelistClassV2": {
        "type": "object",
        "properties": {
          "countNft": {
            "type": "integer",
            "format": "int64"
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricelistDiscountTypes": {
        "enum": [
          "walletcontainsminofpolicyid",
          "whitlistedaddresses",
          "stakeonpool"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "RejectedErrorResultClass": {
        "type": "object",
        "properties": {
          "resultState": {
            "$ref": "#/components/schemas/ResultStates"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "rejectReason": {
            "type": "string",
            "nullable": true
          },
          "rejectParameter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReservedNftsClassV2": {
        "type": "object",
        "properties": {
          "nftUid": {
            "type": "string",
            "nullable": true
          },
          "tokencount": {
            "type": "integer",
            "format": "int64"
          },
          "tokennameHex": {
            "type": "string",
            "nullable": true
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "nftId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReserveMultipleNftsClassV2": {
        "type": "object",
        "properties": {
          "reserveNfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReserveNftsClassV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReserveNftsClassV2": {
        "type": "object",
        "properties": {
          "lovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "nftUid": {
            "type": "string",
            "nullable": true
          },
          "nftId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "tokencount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ResultStates": {
        "enum": ["Ok", "Error"],
        "type": "string"
      },
      "RoyaltyClass": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "pkh": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleconditionsClassV2": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/SaleConditionsTypes"
          },
          "policyId1": {
            "type": "string",
            "nullable": true
          },
          "policyId2": {
            "type": "string",
            "nullable": true
          },
          "policyId3": {
            "type": "string",
            "nullable": true
          },
          "policyId4": {
            "type": "string",
            "nullable": true
          },
          "policyId5": {
            "type": "string",
            "nullable": true
          },
          "minOrMaxValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "policyProjectname": {
            "type": "string",
            "nullable": true
          },
          "whitelistedAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "blacklistedAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "onlyOneSalePerWhitelistAddress": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleConditionsTypes": {
        "enum": [
          "walletcontainspolicyid",
          "walletdoescontainmaxpolicyid",
          "walletdoesnotcontainpolicyid",
          "walletcontainsminpolicyid",
          "walletmustcontainminofpolicyid",
          "whitlistedaddresses",
          "blacklistedaddresses",
          "stakeonpool",
          "countedwhitelistedaddresses"
        ],
        "type": "string"
      },
      "SellerClass": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/TransactionAddressClass"
          }
        },
        "additionalProperties": false
      },
      "SignDecentralClass": {
        "type": "object",
        "properties": {
          "buyer": {
            "$ref": "#/components/schemas/TransactionAddressClass"
          }
        },
        "additionalProperties": false
      },
      "SoldNftsOrTokensFromWhitelist": {
        "type": "object",
        "properties": {
          "usedaddress": {
            "type": "string",
            "nullable": true
          },
          "originatoraddress": {
            "type": "string",
            "nullable": true
          },
          "transactionid": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "countnft": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SubmitTransactionClass": {
        "type": "object",
        "properties": {
          "signedCbor": {
            "type": "string",
            "nullable": true
          },
          "signGuid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TokenRegistryMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ticker": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tokens": {
        "type": "object",
        "properties": {
          "countToken": {
            "type": "integer",
            "format": "int64"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "assetNameInHex": {
            "type": "string",
            "nullable": true
          },
          "multiplier": {
            "type": "integer",
            "format": "int64"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "assetName": {
            "type": "string",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionAddressClass": {
        "type": "object",
        "properties": {
          "pkh": {
            "type": "string",
            "nullable": true
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressTxInClass"
            },
            "nullable": true
          },
          "collateralTxIn": {
            "type": "string",
            "nullable": true
          },
          "changeAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionParametersClass": {
        "type": "object",
        "properties": {
          "tokencount": {
            "type": "integer",
            "format": "int64"
          },
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "tokenname": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxInAddressesClass": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "stakeAddress": {
            "type": "string",
            "nullable": true
          },
          "txIn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxInClass"
            },
            "nullable": true
          },
          "lovelaceSummary": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "tokensSum": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "dataProvider": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxInClass": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "nullable": true
          },
          "txId": {
            "type": "integer",
            "format": "int32"
          },
          "lovelace": {
            "type": "integer",
            "format": "int64"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxInTokensClass"
            },
            "nullable": true
          },
          "txHashId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "txTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tokenSum": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TxInTokensClass": {
        "type": "object",
        "properties": {
          "policyId": {
            "type": "string",
            "nullable": true
          },
          "tokenname": {
            "type": "string",
            "nullable": true
          },
          "tokennameHex": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "tokenHex": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "token": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UploadMetadataClass": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadNftClassV2": {
        "type": "object",
        "properties": {
          "tokenname": {
            "type": "string",
            "nullable": true
          },
          "displayname": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "previewImageNft": {
            "$ref": "#/components/schemas/NftFileV2"
          },
          "subfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NftSubfileFileV2"
            },
            "nullable": true
          },
          "metadataPlaceholder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataPlaceholderClass"
            },
            "nullable": true
          },
          "metadataOverride": {
            "type": "string",
            "nullable": true
          },
          "priceInLovelace": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadNftResultClass": {
        "type": "object",
        "properties": {
          "nftId": {
            "type": "integer",
            "format": "int32"
          },
          "nftUid": {
            "type": "string",
            "nullable": true
          },
          "ipfsHashMainnft": {
            "type": "string",
            "nullable": true
          },
          "ipfsHashSubfiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "assetId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WhitelistetedCountClass": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "countNft": {
            "type": "integer",
            "format": "int64"
          },
          "stakeAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "description": "Enter the token via the following template: Bearer JWT\nExample:\nBearer ApikeyOrAccessToken",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
